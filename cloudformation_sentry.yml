AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DNSZoneId:
    Type: String
    Description: HostZoneID from DNS
  DNSZoneDomain:
    Type: String
    Description: HostZoneDomain from DNS
  CustomDNSHostname:
    Type: String
    Default: ''
    Description: Custom DNS Hostname, which overrides the dynamic generated one
  RedisClusterNodes:
    Type: Number
    MinValue: 1
    Default: 1
    Description: Number of Redis Cluster Nodes
  RedisInstanceType:
    Type: String
    Default: cache.t2.micro
    Description: InstanceClass for each Redis node.
  SSHKeyPairName:
    Type: String
    Default: None
    Description: EC2 SSH KeyPair Name
  DBUsername:
    Type: String
    Default: sentryuser
    Description: Default database user
  DBPassword:
    Type: String
    Default: SentryPassword
    Description: Password for default database user
    NoEcho: true
  SentryOwner:
    Type: String
    Default: sentry
    MinLength: '1'
    MaxLength: '30'
    Description: Owner for Sentry
  SentryAdminUser:
    Type: String
    Default: admin
    MinLength: '1'
    MaxLength: '30'
    Description: Username for root sentry access
  SentryAdminPassword:
    NoEcho: true
    Default: supersectretadminpassword
    Type: String
    Description: Password for root sentry access - minimum 20 characters
    MinLength: '20'
  SentrySecretKey:
    Type: String
    Default: '#this-secret-key-must-be-at-least-fifty-characters!'
    Description: Private key for encrypting user sessions.
    MinLength: '50'
    NoEcho: true
  SentryGithubAppId:
    Description: GitHub API App ID for SSO
    Type: String
    Default: ''
  SentryGithubApiSecret:
    Description: GitHub API secret key for SSO
    Type: String
    Default: ''
    NoEcho: true
  SentryMailHost:
    Description: SMTP host for sentry to use to send email
    Type: String
    Default: email-smtp.eu-west-1.amazonaws.com
  SentryMailPort:
    Description: SMTP port for sentry to use to send email
    Type: String
    Default: '25'
  SentryMailUsername:
    Description: SMTP username for sentry to use to send email
    Type: String
    Default: ''
  SentryMailPassword:
    Description: SMTP password for sentry to use to send email
    Type: String
    NoEcho: true
    Default: ''
  SentryMailFrom:
    Description: Sending email address for sentry to use to send email
    Type: String
    Default: 'noreply@example.com'
  SentryInstanceType:
    Description: The size of the EC2 instances
    Default: t2.medium
    Type: String
  SentryScalingMinNodes:
    Type: Number
    Description: Minium size of the auto scaling group
    Default: 1
  SentryScalingMaxNodes:
    Type: Number
    Description: Maximum size of the auto scaling group
    Default: 2
  Tags:
    Description: A comma seperated list of key=value pairs
    Type: String
    Default: ''

Mappings:
  RegionMap:
    # ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*
    # ToDo: move this to a Lambda Function and dynamically lookup AMIID
    #       https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html
    ca-central-1: {"64": "ami-0086bcfbab4b22f60"}
    us-west-1: {"64": "ami-0c0e5a396959508b0"}
    us-east-1: {"64": "ami-09f9d773751b9d606"}

  # ToDo: move this mapping to a Lambda Function and get the available Zones during launch
  Regions:
    us-east-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: true, Subnet5: true, Subnet6: true}
    us-east-2: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    # us-west-1b is no longer available for new AWS costumers
    us-west-1: {Subnet1: true, Subnet2: false, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    us-west-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-2: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-3: {Subnet1: true, Subnet2: false, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-southeast-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-southeast-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-south-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-3: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-central-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    sa-east-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ca-central-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}

Conditions:
  UseCustomDNSHostname: !Not [!Equals ['', !Ref CustomDNSHostname]]
  UseSSHKeyPairName: !Not [!Equals ['None', !Ref SSHKeyPairName]]
  hasTags: !Not [!Equals ['', !Ref Tags]]
  Create1stSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet1" ], true]
  Create2ndSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet2" ], true]
  Create3rdSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet3" ], true]
  Create4thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet4" ], true]
  Create5thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet5" ], true]
  Create6thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet6" ], true]

Resources:
  GetResourceTags:
    Type: Custom::GetParameterAsTags
    Version: 1.0
    DependsOn: InfrastructureStack
    Properties:
      ServiceToken: !GetAtt InfrastructureStack.Outputs.TagParser
      data: !Ref Tags

  GetResourceTagsASG:
    Type: Custom::GetParameterAsTags
    Version: 1.0
    DependsOn: InfrastructureStack
    Properties:
      ServiceToken: !GetAtt InfrastructureStack.Outputs.TagParserASG
      data: !Ref Tags

  InfrastructureStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_vpc_creation.yml
      Parameters:
        Tags: !If [hasTags, !Ref Tags, !Ref "AWS::NoValue"]

  RDSSubnet0:
    Type: 'AWS::EC2::Subnet'
    Condition: Create1stSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [200, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: Create2ndSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [201, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: Create3rdSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [202, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: Create4thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [203, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: Create5thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [204, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet5:
    Type: 'AWS::EC2::Subnet'
    Condition: Create6thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [205, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "RDS Subnet Group"
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      SubnetIds:
        - !If [ Create1stSubnet, !Ref RDSSubnet0, !Ref "AWS::NoValue"]
        - !If [ Create2ndSubnet, !Ref RDSSubnet1, !Ref "AWS::NoValue"]
        - !If [ Create3rdSubnet, !Ref RDSSubnet2, !Ref "AWS::NoValue"]
        - !If [ Create4thSubnet, !Ref RDSSubnet3, !Ref "AWS::NoValue"]
        - !If [ Create5thSubnet, !Ref RDSSubnet4, !Ref "AWS::NoValue"]
        - !If [ Create6thSubnet, !Ref RDSSubnet5, !Ref "AWS::NoValue"]

  CacheSubnet0:
    Type: 'AWS::EC2::Subnet'
    Condition: Create1stSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [210, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: Create2ndSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [211, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: Create3rdSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [212, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: Create4thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [213, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: Create5thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [214, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet5:
    Type: 'AWS::EC2::Subnet'
    Condition: Create6thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [215, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Cache Subnet Group"
      SubnetIds:
      - !If [ Create1stSubnet, !Ref CacheSubnet0, !Ref "AWS::NoValue"]
      - !If [ Create2ndSubnet, !Ref CacheSubnet1, !Ref "AWS::NoValue"]
      - !If [ Create3rdSubnet, !Ref CacheSubnet2, !Ref "AWS::NoValue"]
      - !If [ Create4thSubnet, !Ref CacheSubnet3, !Ref "AWS::NoValue"]
      - !If [ Create5thSubnet, !Ref CacheSubnet4, !Ref "AWS::NoValue"]
      - !If [ Create6thSubnet, !Ref CacheSubnet5, !Ref "AWS::NoValue"]

  ###### SecurityGroups ######
  PostgresAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: Allows access postgres instance
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '5432'
        IpProtocol: tcp
        FromPort: '5432'
        SourceSecurityGroupId: !Ref PostgresAccessSecurityGroup
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: postgres instance source
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  CacheAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "This SG gives acces to the caching service"
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Cache Security Group, allows acces from CacheAccessSecurityGroup"
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId: !Ref CacheAccessSecurityGroup
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  SentryLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '443'
        IpProtocol: tcp
        FromPort: '443'
        CidrIp: 0.0.0.0/0
      - ToPort: '443'
        IpProtocol: tcp
        FromPort: '443'
        CidrIpv6: ::/0
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: An ELB group allowing access only to from the corresponding component
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  SentrySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '443'
        IpProtocol: tcp
        FromPort: '443'
        SourceSecurityGroupId: !Ref SentryLoadBalancerSecurityGroup
      - ToPort: '22'
        FromPort: '22'
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - ToPort: '22'
        FromPort: '22'
        IpProtocol: tcp
        CidrIpv6: ::/0
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: Sentry instance security group, gives access to from load balancer
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  ###### PostgreSQL Database #######
  RDSSentry:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '30'
      Engine: 'postgres'
      DBInstanceClass: 'db.t2.small'
      DBName: 'sentry'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      VPCSecurityGroups:
        - !Ref PostgresSecurityGroup

  ###### S3 Bucket #######
  SentryFilesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'AWS::AccountId', !Ref 'AWS::Region', !Ref 'AWS::StackName', 'sentry-files']]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      AccessControl: Private

  SentryS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SentryFilesS3Bucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "*"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt SentryRole.Arn
            Resource:
              Fn::Join:
                - ""
                -
                  - !GetAtt SentryFilesS3Bucket.Arn
                  - "/*"
          -
            Action:
              - "*"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt SentryRole.Arn
            Resource: !GetAtt SentryFilesS3Bucket.Arn

  ###### Redis Cache ######
  CacheSentry:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      NumCacheNodes: !Ref RedisClusterNodes
      CacheNodeType: !Ref RedisInstanceType
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      VpcSecurityGroupIds:
        - !GetAtt CacheSecurityGroup.GroupId

  ###### Sentry ######
  SentryElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: !Split [',', !GetAtt InfrastructureStack.Outputs.PublicSubnets]
      Scheme: internet-facing
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Listeners:
      - InstancePort: '443'
        Protocol: HTTPS
        InstanceProtocol: HTTPS
        LoadBalancerPort: '443'
        SSLCertificateId: !Ref ACMSentrySSLCert
      SecurityGroups:
        - !Ref SentryLoadBalancerSecurityGroup
      HealthCheck:
        HealthyThreshold: 3
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 10
        Target: HTTPS:443/_health/

  SentryDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNSZoneId
      Name: !Sub
        - "${Hostname}.${DNSZone}"
        - DNSZone: !Ref DNSZoneDomain
          Hostname: !If [UseCustomDNSHostname, !Ref CustomDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-sentry"]
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt SentryElasticLoadBalancer.CanonicalHostedZoneNameID
        DNSName: !GetAtt SentryElasticLoadBalancer.DNSName

  SentryInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SentryRole

  SentryLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !If [UseSSHKeyPairName, !Ref SSHKeyPairName, !Ref "AWS::NoValue"]
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 64]
      SecurityGroups:
        - !Ref SentrySecurityGroup
        - !Ref CacheAccessSecurityGroup
        - !Ref PostgresAccessSecurityGroup
      InstanceType: !Ref SentryInstanceType
      IamInstanceProfile: !Ref SentryInstanceProfile
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            apt-get update
            apt-get install ansible awscli unzip -y
            openssl req -new -nodes -x509 -subj "/C=GB/ST=London/L=London/O=Private/CN=${AWS::StackName}" -days 3650 -keyout /tmp/server.key -out /tmp/bundle.crt -extensions v3_ca
            curl https://github.com/dentalwings/sentry-formation/archive/master.zip --output /tmp/repo.zip --location
            unzip /tmp/repo.zip -d /tmp
            cat > /tmp/sentry-formation-master/hosts << EOF
            [aws]
            127.0.0.1
            [aws:vars]
            user=ubuntu
            owner="${SentryOwner}"
            sentry_admin_username="${SentryAdminUser}"
            sentry_admin_password="${SentryAdminPassword}"
            sentry_public_dns_name="${SentryUrl}"
            sentry_secret_key="${SentrySecretKey}"
            sentry_github_app_id="${SentryGithubAppId}"
            sentry_github_api_secret="${SentryGithubApiSecret}"
            sentry_url="${SentryUrl}"
            sentry_db_host="${DBHost}"
            sentry_db_port="5432"
            sentry_db_name="sentry"
            sentry_db_user="${DBUsername}"
            sentry_db_password="${DBPassword}"
            sentry_redis_host="${RedisHost}"
            sentry_redis_port="6379"
            sentry_mail_host="${SentryMailHost}"
            sentry_mail_port="${SentryMailPort}"
            sentry_mail_username="${SentryMailUsername}"
            sentry_mail_password="${SentryMailPassword}"
            sentry_mail_from="${SentryMailFrom}"
            sentry_files_bucket_name="${AWS::AccountId}-${AWS::Region}-${AWS::StackName}-sentry-files"
            EOF
            ansible-playbook /tmp/sentry-formation-master/site.yml -i /tmp/sentry-formation-master/hosts
          - SentryUrl: !Sub
            - "${Hostname}.${DNSZone}"
            - DNSZone: !Ref DNSZoneDomain
              Hostname: !If [UseCustomDNSHostname, !Ref CustomDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-sentry"]
            DBHost: !GetAtt RDSSentry.Endpoint.Address
            RedisHost: !GetAtt CacheSentry.RedisEndpoint.Address

  SentryAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT15M
        MaxBatchSize: 1
        MinInstancesInService: 1
    Properties:
      LoadBalancerNames:
        - !Ref SentryElasticLoadBalancer
      MinSize: !Ref SentryScalingMinNodes
      MaxSize: !Ref SentryScalingMaxNodes
      LaunchConfigurationName: !Ref SentryLaunchConfiguration
      Tags: !If [hasTags, !GetAtt GetResourceTagsASG.result, !Ref "AWS::NoValue"]
      VPCZoneIdentifier: !Split [',', !GetAtt InfrastructureStack.Outputs.PublicSubnets]

  # ACM SSL Cert
  ACMSentrySSLCert:
    Type: 'Custom::ACMCertificate'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt ACMApproverFunction.Arn
      DomainName: !If [UseCustomDNSHostname, !Ref CustomDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-sentry"]
      DomainSuffix: !Ref DNSZoneDomain
      HostedZoneId: !Ref DNSZoneId


  ###### Helpers ######
  SentryLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

  SentryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - Fn::Join:
                    - ''
                    - - !GetAtt SentryFilesS3Bucket.Arn
                      - "/*"

  ####### SSL Certificate approval helper ######
  ACMApproverRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ACMCFNLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "acm:*"
                  - "route53:*"
                Resource: "*"

  ACMApproverFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import sys,os,json,datetime,boto3,traceback,time,hashlib
          from botocore.vendored import requests
          from datetime import date, datetime
          def json_serial(obj):
              if isinstance(obj, (datetime, date)):
                  return obj.isoformat()
              raise TypeError ("Type %s not serializable" % type(obj))
          def cfn_response(url, body):
              headers = {'content-type' : '','content-length' : str(len(body))}
              response = requests.put(url,data=body,headers=headers)
          def acm_certificate(event, context):
              print "Got %s" % json.dumps(event, default=json_serial)
              if event['RequestType'] in ['Create','Update']:
                  cfn_response(event['ResponseURL'], _create_acm_certificate(event))
              else:
                  cfn_response(event['ResponseURL'], _delete_acm_certificate(event))
          def _create_acm_certificate(event):
              acm = boto3.client('acm')
              ret = {}
              ret['StackId'] = event['StackId']
              ret['RequestId'] = event['RequestId']
              ret['LogicalResourceId'] = event['LogicalResourceId']
              rp = event['ResourceProperties']
              try:
                  cs = rp['DomainSuffix'].rstrip('.')
                  dn = "%s.%s" % (rp['DomainName'].rstrip('.'), cs)
                  san = dn
                  if len(dn) > 62:
                      hashlen = 62-len(cs)
                      ch = hashlib.sha256(dn).hexdigest()[-hashlen:]
                      dn = "%s.%s" % (ch, cs)
                  response = acm.list_certificates(
                      CertificateStatuses=['PENDING_VALIDATION','ISSUED']
                  )
                  cert_arn = None
                  for cert in response['CertificateSummaryList']:
                      print "existing cert: %s" % cert['DomainName']
                      if cert['DomainName'] == dn:
                          cert_arn = cert['CertificateArn']
                  if not cert_arn:
                      response = acm.request_certificate(
                          DomainName=dn,
                          ValidationMethod='DNS',
                          IdempotencyToken=event['LogicalResourceId'],
                          SubjectAlternativeNames = [san]
                      )
                      cert_arn = response['CertificateArn']
                      time.sleep(10)
                  response = acm.describe_certificate(
                      CertificateArn=cert_arn
                  )
                  r53_c = []
                  for vo in response['Certificate']['DomainValidationOptions']:
                      rr = vo['ResourceRecord']
                      r53_c.append({'Action':'UPSERT','ResourceRecordSet':{'Name': rr['Name'],'Type': rr['Type'],'TTL': 3600,'ResourceRecords': [{'Value': rr['Value']}]}})
                  r53 = boto3.client('route53')
                  response = r53.change_resource_record_sets(
                      HostedZoneId=rp['HostedZoneId'],
                      ChangeBatch={'Comment':'Auth','Changes':r53_c}
                  )
                  time.sleep(220)
                  ret['PhysicalResourceId'] = cert_arn
                  ret['Data'] = {}
                  ret['Data']['CertificateArn'] = cert_arn
                  ret['Status'] = 'SUCCESS'
              except:
                  traceback.print_exc()
                  ret['Status'] = 'FAILED'
                  ret['Reason'] = 'Good question'
              finally:
                  cfn_response(event['ResponseURL'], json.dumps(ret))
              return json.dumps(ret)

          def _delete_acm_certificate(event):
              acm = boto3.client('acm')
              ret = {}
              ret['StackId'] = event['StackId']
              ret['RequestId'] = event['RequestId']
              ret['LogicalResourceId'] = event['LogicalResourceId']
              ret['PhysicalResourceId'] = event['PhysicalResourceId']
              try:
                  response = acm.delete_certificate(
                      CertificateArn=event['PhysicalResourceId']
                  )
                  print "got response %s" % json.dumps(response, default=json_serial)
                  ret['Status'] = 'SUCCESS'
              except:
                  traceback.print_exc()
                  ret['Status'] = 'SUCCESS'
                  ret['Reason'] = 'Good question'
              finally:
                  cfn_response(event['ResponseURL'], json.dumps(ret))

              return json.dumps(ret)
      Description: Cloudformation Custom Resource for ACM certs using Route53 approval
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Handler: index.acm_certificate
      MemorySize: 256
      Runtime: python2.7
      Timeout: 300
      Role:
        Fn::GetAtt: ACMApproverRole.Arn

Outputs:
  SentryUrl:
    Value: !Sub
      - "https://${Hostname}.${DNSZone}"
      - DNSZone: !Ref DNSZoneDomain
        Hostname: !If [UseCustomDNSHostname, !Ref CustomDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-sentry"]
